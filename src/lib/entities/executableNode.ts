/**
 * –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å ExecutableNode ‚Äî –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —É–∑–ª–æ–≤ –≤ Abstract.
 * 
 * üîπ **–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è**:
 * - –ö–∞–∂–¥—ã–π —É–∑–µ–ª –º–æ–∂–µ—Ç **—Ä–µ–∞–∫—Ç–∏–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è**, –≤—ã–∑—ã–≤–∞—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º—ã—Ö —É–∑–ª–æ–≤.
 * - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ **—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ**, —Ç–∞–∫ –∏ **–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ** –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è **–≤–µ—Ä—Å–∏–æ–Ω–Ω–æ—Å—Ç—å** –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è.
 * - –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç **–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π**, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤.
 * - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–∑–ª—ã –º–æ–≥—É—Ç **–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ø–æ—á–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π**, –µ—Å–ª–∏ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ.
 * 
 * üîπ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**
 * 1. **–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è** –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–µ—Ç–æ–¥–∞ `execute()`, –∫–æ—Ç–æ—Ä—ã–π:
 *    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é —É–∑–ª–∞.
 *    - –ó–∞–ø—É—Å–∫–∞–µ—Ç `executeCore()` –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞.
 *    - –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º—ã—Ö —É–∑–ª–æ–≤ **–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ** (–Ω–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏).
 * 
 * 2. **executeCore()** ‚Äî –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö, –æ–ø—Ä–µ–¥–µ–ª—è—è, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ—Ç —É–∑–µ–ª.
 * 
 * 3. **–í–µ—Ä—Å–∏–æ–Ω–Ω–æ—Å—Ç—å**:
 *    - –í –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è —É–∑–ª–∞ –æ–±–Ω—É–ª—è–µ—Ç—Å—è.
 *    - –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–∑–µ–ª –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é.
 *    - –ï—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º—ã–π —É–∑–µ–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é, –æ–Ω –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ.
 * 
 * 4. **–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å**:
 *    - –ï—Å–ª–∏ —É–∑–µ–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, `execute()` –æ–∂–∏–¥–∞–µ—Ç –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∑–∞–≤–∏—Å–∏–º—ã—Ö —É–∑–ª–æ–≤.
 *    - –ï—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º—ã–π —É–∑–µ–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ **–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç** –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤.
 * 
 * üîπ **–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
 * ```typescript
 * const computeNode = new ComputeNode({})
 * const logNode = new LogNode({ computeNode })
 * computeNode.addDependent({ node: logNode })
 * computeNode.execute()
 * ```
 * 
 * –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ `computeNode` —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è —Å–∞–º, –∑–∞—Ç–µ–º –≤—ã–∑–æ–≤–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ `logNode`.
 */

import type { CriticalParams, ExecuteCoreParams, IExecutableNode, NodeId } from "$lib/types/executable.types";

abstract class ExecutableNode implements IExecutableNode {
    public readonly name?: string;
    public readonly id: NodeId;
    
    private effects: Set<NodeId> = new Set();
    private version: number = 0;
    private isCriticalNode: boolean = false;

    constructor({ name, idGenerator }: { 
        name: string,
        idGenerator: () => string 
    }) {
        this.name = name;
        this.id = name ?? idGenerator();
    }

    abstract executeCore({ namespace }: ExecuteCoreParams): Promise<void> | void;
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã c –∑–∞–≤–∏—Å–∏–º—ã–º–∏ —É–∑–ª–∞–º–∏
    addEffect({ nodeId }: { nodeId: NodeId }): void {
        this.effects.add(nodeId);
    }

    removeEffect({ nodeId }: { nodeId: NodeId }): void {
        this.effects.delete(nodeId);
    }

    getEffects(): Set<NodeId> {
        return this.effects;
    }
    
    getVersion(): number {
        return this.version;
    }
    
    incrementVersion(): void {
        this.version++;
    }
    
    setCritical({ isCritical }: CriticalParams): void {
        this.isCriticalNode = isCritical;
    }

    isCritical(): boolean {
        return this.isCriticalNode;
    }
}