import type { ContextManager } from "./ContextManager"

export class ContextNavigator {
  stack: Map<string, ContextManager> = new Map()
  constructor(private currentContext: ContextManager) {}

  // üéØ –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–ø–æ—á–∫—É –∏–º—ë–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  getPath(): string[] {
    return Array.from(this.stack.keys())
  }

  // üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ü–µ–ø–æ—á–∫–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
  isInChain(params: { targetContext: ContextManager }): boolean {
    let current: ContextManager | null = this.currentContext
    while (current) {
      if (current === params.targetContext) return true
      current = current.parent
    }
    return false
  }

  // üéØ –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ —É—Å–ª–æ–≤–∏—é
  findContext(params: { 
    predicate: (context: ContextManager) => boolean 
  }): ContextManager | null {
    let current: ContextManager | null = this.currentContext
    while (current) {
      if (params.predicate(current)) return current
      current = current.parent
    }
    return null
  }

  // üéØ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ –≥–ª—É–±–∏–Ω–µ
  getContextByDepth(params: { depth: number }): ContextManager | null {
    let current: ContextManager | null = this.currentContext
    for (let i = 0; i < params.depth && current; i++) {
      current = current.parent
    }
    return current
  }

  // üéØ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ü–µ–ª–µ–≤–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  jumpToContext(params: { targetContext: ContextManager }): boolean {
    if (this.isInChain({ targetContext: params.targetContext })) {
      this.currentContext = params.targetContext
      return true
    }
    return false
  }
}